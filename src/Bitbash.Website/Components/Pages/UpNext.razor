@page "/up-next"
@layout EmptyLayout
@inject EventDetailsProvider EventDetailsProvider
@inject WebsiteSettings Settings
@implements IDisposable

<PageTitle>Up Next | Bitbash</PageTitle>

<div class="container text-center">

<h2 class="mt-5">Next sessions starting at @_startTime.ToString("HH:mm")</h2>

@if (_sessions is not null)
{
    <div class="row justify-content-center p-2">

        @foreach (var session in _sessions)
        {
            <UpNextCard Session="@session" />
        }

    </div>
    
    @if (Test is true)
    {
        <p>⚠️ Test mode is enabled</p>
    }
}

</div>

@code
{
    [SupplyParameterFromQuery(Name = "test")]
    private bool? Test { get; set; }

    [SupplyParameterFromQuery(Name = "time")]
    private DateTime? Time { get; set; }
    
    private IEnumerable<Session>? _sessions;
    private DateTime _startTime;

    private System.Timers.Timer? _timer;
    
    protected override async Task OnInitializedAsync()
    {
        ISessionProvider sessionProvider;
        TimeSpan refreshInterval;

        if (Test is true)
        {
            sessionProvider = new SimulatedSessionProvider(EventDetailsProvider, Settings);
            refreshInterval = TimeSpan.FromSeconds(3);
        }
        else
        {
            sessionProvider = new LiveSessionProvider(EventDetailsProvider, Settings);
            refreshInterval = TimeSpan.FromSeconds(30);
        }

        await RunAsync(sessionProvider, refreshInterval);
    }

    private async Task RunAsync(ISessionProvider sessionProvider, TimeSpan refreshInterval)
    {
        async Task PopulatePageAsync()
        {
            _sessions = await sessionProvider.GetUpNextAsync(ConvertToLocalTime(DateTime.UtcNow));
            _startTime = _sessions.First().StartsAt!.Value;
        }

        await PopulatePageAsync();

        _timer = new System.Timers.Timer(refreshInterval.TotalMilliseconds);
        _timer.Elapsed += async (sender, args) =>
        {
            await PopulatePageAsync();
            await InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }

    private DateTime ConvertToLocalTime(DateTime time)
    {
        var timezone = TimeZoneInfo.FindSystemTimeZoneById("Europe/Amsterdam");
        return TimeZoneInfo.ConvertTimeFromUtc(time, timezone);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private interface ISessionProvider
    {
        public Task<IEnumerable<Session>> GetUpNextAsync(DateTime time);
    }
    
    private class LiveSessionProvider : ISessionProvider
    {
        private readonly EventDetailsProvider _eventDetailsProvider;
        private readonly WebsiteSettings _settings;

        public LiveSessionProvider(EventDetailsProvider eventDetailsProvider, WebsiteSettings settings)
        {
            _eventDetailsProvider = eventDetailsProvider;
            _settings = settings;
        }

        public async Task<IEnumerable<Session>> GetUpNextAsync(DateTime time)
        {
            return await _eventDetailsProvider.GetUpNextAsync(_settings.CurrentEdition, time);
        }
    }

    private class SimulatedSessionProvider : ISessionProvider
    {
        private readonly EventDetailsProvider _eventDetailsProvider;
        private readonly WebsiteSettings _settings;

        private List<IGrouping<DateTime, Session>>? _sessions;
        private int _index;

        public SimulatedSessionProvider(EventDetailsProvider eventDetailsProvider, WebsiteSettings settings)
        {
            _eventDetailsProvider = eventDetailsProvider;
            _settings = settings;
        }

        public async Task<IEnumerable<Session>> GetUpNextAsync(DateTime time)
        {
            _sessions ??= (await _eventDetailsProvider.GetUpNextTestSessionsAsync(_settings.CurrentEdition))
                .ToList();

            var nextSessions = _sessions[_index++];
            if (_index > _sessions.Count - 1)
            {
                _index = 0;
            }

            return nextSessions;
        }
    }
}
