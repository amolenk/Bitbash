@inject EventDetailsProvider EventDetailsProvider
@inject WebsiteSettings Settings

@if (eventDates is not null)
{
    <ul class="tabs">
        @foreach (var date in eventDates)
        {
            <li class="tabs-item @(@date == selectedDate ? "tabs-item--active" : "")">
                <a class="tabs-link" href="" @onclick="@(() => SetSelectedDate(@date))" @onclick:preventDefault>@date.ToString("dddd d MMMM")</a>
            </li>
        }
    </ul>
}

@code
{
    [Parameter]
    public EventCallback<DateOnly> OnSelectedDateChanged { get; set; }

    private IEnumerable<DateOnly>? eventDates;

    private DateOnly? selectedDate;

    protected override async Task OnInitializedAsync()
    {
        eventDates = await EventDetailsProvider.GetEventDatesAsync(Settings.CurrentEdition);
        SetSelectedDate(eventDates?.FirstOrDefault());
    }

    private void SetSelectedDate(DateOnly? date)
    {
        selectedDate = date;

        if (date is not null)
        {
            OnSelectedDateChanged.InvokeAsync(date.Value);
        }
    }
}